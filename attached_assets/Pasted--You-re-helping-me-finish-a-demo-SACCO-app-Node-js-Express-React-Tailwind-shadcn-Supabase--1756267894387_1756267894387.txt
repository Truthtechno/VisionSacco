

You’re helping me finish a demo SACCO app (Node.js + Express + React + Tailwind/shadcn). Supabase is disabled; data is stored locally (JSON/LowDB or equivalent). Please implement the items below so everything is clickable and functional for a client presentation. Keep it simple—demo quality, not production. If a dependency is missing, install it.

0) Baseline
	•	Ensure we have (or add) lightweight local persistence: lowdb (db.json).
	•	If needed, install: lowdb, nanoid, jspdf, html2canvas, bcryptjs (for demo hashing), and ensure express-session is used for sessions already. Keep existing routes if they exist; otherwise create them as specified.
	•	Data schema in db.json (create if missing): 
{
  "users": [],
  "members": [],
  "loans": [],
  "repayments": [],
  "transactions": []
}

	•	Use nanoid() for IDs. All endpoints should return { success: true/false, data?, error? }.

⸻

1) Fix non-working UI buttons

Dashboard page
	•	Export Report: add two actions in the same button dropdown or as two buttons:
	•	Export CSV: generate CSV for a chosen range (today/7d/30d/all) including totals (members count, loan totals, repayments, balances).
	•	Export PDF: client-side export using html2canvas + jsPDF capturing dashboard summary cards + recent tables. Provide filename like dashboard-report-YYYY-MM-DD.pdf.
	•	New Transaction: open a modal with fields:
	•	Member (select), Type (Deposit, Withdrawal, Loan Disbursement, Fee), Amount (number), Date, Note.
	•	POST /api/transactions → also update related balances (for demo, store a transaction row and don’t overcomplicate balances—just aggregate when displaying).
	•	Quick Actions (Add Member, Process Loan, Record Deposit, Generate Report):
	•	Add Member → open AddMemberModal (name, email, phone, status preset to active). POST /api/members.
	•	Process Loan → open CreateLoanModal (member, amount, term, purpose). POST /api/loans.
	•	Record Deposit → open New Transaction modal with Type prefilled Deposit.
	•	Generate Report → navigate to Reports page and preselect “Last 30 days”.

Member Portal
	•	Request a Loan button should open a modal with fields: Amount, Purpose, Term (months). On submit POST /api/loans with status: "pending", requestedBy: memberId, then show success toast and refresh list.

⸻

2) Loans page fixes
	•	Create a new loan form must scroll: on the modal/body add Tailwind classes like max-h-[80vh] overflow-y-auto (or equivalent) so long forms can scroll.
	•	“Error: failed to create a loan”: ensure POST /api/loans writes to local DB and returns success. Minimal validation: memberId required, amount > 0, term >= 1. Set defaults:
{ id, memberId, amount, term, purpose, status: "pending", createdAt, approvedAt: null, disbursedAt: null, balance: amount }
	•	View Details button: open LoanDetailsModal showing basic info + computed totals and a simple schedule (even if rough: interest 0% for demo is okay; or flat sample). No external calc needed—keep it simple.
	•	Record Payment button: open RecordPaymentModal (amount, date, note) → POST /api/repayments and reduce loan.balance accordingly. If balance <= 0, set status "closed". Show success toast and refresh list.

⸻

3) Financial Reports
	•	Export PDF not working: fix Reports page export using html2canvas + jsPDF to capture the visible report table and summary. Add a tiny helper:
	•	exportReportPDF({ range, title }) → downloads financial-report-YYYY-MM-DD.pdf.
	•	Add Export CSV here too for tabular raw rows (transactions/loans/repayments) within the selected date range.

⸻

4) Member Status feature (visible only to Admin + Manager)
	•	Add status field to members: one of "active" | "part-time" | "deactivated".
	•	On Members page:
	•	Add filter chips/tabs: Active Members, Part-Time Members, Deactivated Members.
	•	Show a Status column and a Change Status control only if the logged-in user’s role is admin or manager.
	•	Endpoint: PATCH /api/members/:id/status { status }.
	•	Regular member role should NOT see the status column or controls (but can still see their own profile).

⸻

5) Simple email/password auth for demo
	•	Pages: /signup, /login (React). Header/user menu shows Logout.
	•	Endpoints:
	•	POST /api/auth/signup { name, email, password } → create user with role "member" by default and (optionally) auto-create a members entry referencing that user. Hash with bcryptjs for demo.
	•	POST /api/auth/login { email, password } → verify, create session via express-session.
	•	POST /api/auth/logout → destroy session.
	•	GET /api/auth/me → returns { id, name, email, role }.
	•	Seed three demo users in db.json if missing:
[
  { "id": "u_admin",   "name": "Admin User",   "email": "admin@sacco.test",   "passwordHash": "<hashed>", "role": "admin" },
  { "id": "u_manager", "name": "Manager User", "email": "manager@sacco.test", "passwordHash": "<hashed>", "role": "manager" },
  { "id": "u_member",  "name": "Member User",  "email": "member@sacco.test",  "passwordHash": "<hashed>", "role": "member" }
]
	•	In the UI:
	•	Show “Login”/“Signup” if no session; otherwise show avatar/menu with Logout.
	•	Protect manager/admin pages (Members statuses, Reports exports, Loans approvals) by role check (admin/manager only).
	•	Member portal shows Request a Loan and personal records only.

⸻

6) Wiring notes / acceptance criteria
	•	All listed buttons open working modals/pages and complete flows without errors.
	•	Create Loan succeeds and shows in list; Record Payment reduces balance.
	•	View Details opens a modal with the loan info.
	•	Member Portal “Request a Loan” works for a logged-in member.
	•	Dashboard: “New Transaction” creates a transaction and it appears in recent activity.
	•	Export Report/PDF works on Dashboard and Reports pages (downloads files).
	•	Member Status visible & editable only to admin/manager; hidden from member.
	•	Login/Signup/Logout flows work with sessions; header updates accordingly.

Please implement these changes, create any missing components (modals, forms), and wire the endpoints to LowDB. Keep everything simple and demo-robust. After implementing, print in the console:
	•	The seed credentials (admin/manager/member emails and passwords).
	•	The list of key routes that were added/updated.

⸻

If you need to adjust exact button labels/selectors, use the current visible text in the UI and keep the behavior described above. Keep styling consistent with Tailwind/shadcn and ensure modals are scrollable (max-h-[80vh] overflow-y-auto).